
_________________
__SYPNOSIS_______

_________________
__CONFIGURATION__

1. edit CMakeLists.txt for project
   
   set project name, version number and targets (at end of file).

2. edit files in setup/ directory

   defining compiler flags (compiler.cmake), install location (install.cmake) 
   packaging (package.cmake), and third party package search locations 
   (search.cmake). 

3. edit config.h.in

  customizing c/c++ projects.

5. setup extras 

   customize/add CONTROL.cmake, FIND.cmake and PATCH  CMakeLists.txt in target
   directory

_________________
__BUILD TREE_____

The build tree is constructed using the require(<package>) function tying 
directories into the build process. 

If present the CONTROL.cmake file is is processed in the target directory. If 
not the directory (containing a CMakeLists.txt) file is directly tied into the 
build process. In CONTROL.cmake: if BUILD is not "on" the FIND.cmake script is 
used to search system for package component. If BUILD is "on" with a "TARBALL" 
is set, then the tarball will be unpacked, the content of PATCH (if present) 
copied into the unpacked source directory and this directory added to the cmake
build.

_________________
__BUILD PROCESS__

Within "build" directory run

> cmake .. [<options>]       

to configure the build. Use the following options

-DPREFIX=<install-prefix> 
-DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain/<file>

to specify the installation directory and the toolchain file. Use

> make [VERBOSE=1]

to build project. 

_________________
__INSTALLATION___

Install location can be customized by editing setup/install.cmake. To install
libraries, headers and runtime componenent type 
 
> make install  

from within the "build" directory. Default install directory is "build/INSTALL" 
within the project tree.

_________________
__CLEANUP________

To cleanup build run

> make clean

from within "build" directory or

> make distclean

to remove INSTALL and wipe content of "build" directory


_________________
__PACKAGING______

Run

> cpack 

from within the "build" directory to generate standard package types or  

> cpack -G<generator>

where <generator> specifies a generator. Choices are:
 
TGZ (gzipped compressed tar)
STGZ (self-extracting gzip compressed tar)
TBZ2 (bzip2 compressed tar)
TZ (tar unix compressed)
ZIP 

or 

NSIS (nullsoft installer)
